---
#
# constants
#
namesapce: &namespace demo-app-ns

#
# Create a namespace
#

namespace:
  name: *namespace
  create: false

#
# Create an egress to be able to connect to external podman database
#
egress:
  name: allow-egress-to-podman
  cidr: 10.88.0.2/32
  ports:
  - 5432

#
# Ingress controller to access application from external
#
ingress-nginx:
  namespaceOverride: *namespace

ingress:
  name: demo-app-ingress
  namespace: *namespace
  ingressClassName: nginx
  rules:
  - host: mine.me
    http:
      paths:
      - path: /.*
        pathType: ImplementationSpecific
        backend:
          service:
            name: app-frontend-svc
            port:
              number: 80

#
# List of applications to deploy to cluster
#
applications:

#
# BACKEND
#


- application: backend
  labels:
    app: app-backend

  serviceAccount:
    create: true

  name: app-backend
  namespace: *namespace

  # Deployment definition
  deploy:
    replicas: 1
    containers:
    - name: app-backend
      imagePullPolicy: IfNotPresent
      repository: docker.io/kipsnak
      image: demo-backend
      tag: latest
      env:
        SPRING_DATASOURCE_USERNAME: "myapplication" 
        SPRING_DATASOURCE_PASSWORD: "M3P@ssw0rd!"
        SPRING_DATASOURCE_URL: "jdbc:postgresql://10.88.0.2:5432/employees?useSSL=false"
      ports:
      - name: be-http
        containerPort: 8080
  
  # Service definition
  service:
    type: ClusterIP  # just pick an IP from internal IP pool since ingress
    labels:
      app: app-backend
    ports:
      - name: be-port
        port: 8080
        targetPort: be-http

#
# FRONTEND
#

#### Disabled while debuging frontend ####
- application: frontend
  labels:
    app: app-frontend

  serviceAccount:
    create: true

  name: app-frontend
  namespace: *namespace

  # Deployment definition
  deploy:
    replicas: 1
    containers:
    - name: app-frontend
      imagePullPolicy: IfNotPresent
      repository: docker.io/kipsnak
      image: demo-frontend
      tag: latest
      ports:
      - name: fe-http
        containerPort: 80

  # Service definition   
  service:
    type: ClusterIP  # just pick an IP from internal IP pool since ingress
    labels:
      app: app-frontend
    ports:
      - name: fe-port
        port: 80
        targetPort: fe-http